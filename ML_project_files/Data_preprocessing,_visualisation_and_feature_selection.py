# -*- coding: utf-8 -*-
"""Copy of Data_preprocessing, visualisation and feature selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HP1qHTWxk8833lZidHe7MgtvDrAZay9i

# Data preprocessing and feature selection

## Importing libraries and packages
"""

# importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.metrics import f1_score
from sklearn.metrics import matthews_corrcoef

"""## Importing the dataset"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
sns.set_style('whitegrid')
df = pd.read_csv(r'heart_failure_clinical_records_dataset.csv')
df.head(5)

# Droping the feature time

df= df.drop(columns='time')

"""# Encoding the dataset

### No encoding needed for this dataset

## Raw data visualisation and statistics
"""

df.describe()

# histogram plots to visualise data distribution
df.hist(figsize=(15, 15))
plt.show()

"""## Taking care of missing data"""

print(df.isnull().sum()) 
print(sum(df.isnull().sum()))

"""## Data cleaning Statregy:
<br> No missing data, no out of range data<br>

## Data visualisation
"""

ListAttr = []
lengthOfList = len(df)
for i in df:
    print(i)
    ListAttr.append(i)
print(len(ListAttr))    

for i in range(len(ListAttr)-1):
    for j in range(i+1,len(ListAttr)-1,3):
        print(i,j)
        #f, axes = plt.subplots(1, 2)
        #plt.figure(figsize=(5, 5))
        #sns.set_style()
        #sns.scatterplot(data=df, x=ListAttr[i], y=ListAttr[j], hue=ListAttr[-1])
        #plt.show()
        
        f, axes = plt.subplots(1, 3)
        #plt.figure(figsize=(10, 10))
        sns.set(rc={'figure.figsize':(10,5)})
        sns.set_style()
        sns.scatterplot(data=df, x=ListAttr[i], y=ListAttr[j]  , hue=ListAttr[-1], ax=axes[0])
        if (j+1 <= len(ListAttr)-1):
            sns.set_style()
            sns.scatterplot(data=df, x=ListAttr[i], y=ListAttr[j+1], hue=ListAttr[-1], ax=axes[1])
            if (j+2 <= len(ListAttr)-1):
                sns.set_style()
                sns.scatterplot(data=df, x=ListAttr[i], y=ListAttr[j+2], hue=ListAttr[-1], ax=axes[2])
        f.tight_layout()
        plt.show()
print()

"""## Splitting the dataframe in train and test sets"""

from sklearn.model_selection import train_test_split
df_train, df_test = train_test_split(df.iloc[:,:], test_size = 0.2, random_state = 0)
print(df_train)

"""## Scaling the train set features """

from sklearn.preprocessing import MinMaxScaler
min_max_scaler = MinMaxScaler()
df_train_scaled= min_max_scaler.fit_transform(df_train)

df_train_scaled= pd.DataFrame(data= df_train_scaled, columns=ListAttr)
print(df_train_scaled)
df_test_scaled= min_max_scaler.transform(df_test)
df_test_scaled= pd.DataFrame(data= df_test_scaled, columns=ListAttr)
print(df_test_scaled)

"""## Features' Correlation coefficients and heatmap"""

correlation=df_train_scaled.corr(method='pearson')
print(correlation)

plt.figure(figsize=(25,15))
df_train_corr = df_train_scaled.corr()

sns.heatmap(df_train_scaled.corr(), square=True, annot=True, cmap="Blues", fmt=".3f")
sns.set(font_scale=1.7)

"""## Defining independent and dependent variables"""

X_train=df_train_scaled.iloc[:, 0:-1]
y_train=df_train_scaled.iloc[:,-1]
X_test=df_test_scaled.iloc[:,0:-1]
y_test=df_test_scaled.iloc[:,-1]
print(X_train)
print(y_train)